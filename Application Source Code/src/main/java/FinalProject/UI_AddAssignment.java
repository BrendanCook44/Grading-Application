package FinalProject;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import java.util.ArrayList;

/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */

/**
 *
 * @author brend
 */
public class UI_AddAssignment extends javax.swing.JFrame {

    /**
     * Creates new form Grades
     */
    public UI_AddAssignment() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        Add_Assignment_Label = new javax.swing.JLabel();
        Home_Button = new javax.swing.JButton();
        Assignment_Type_Label = new javax.swing.JLabel();
        Assignment_Name_Label = new javax.swing.JLabel();
        Assignment_Name = new javax.swing.JTextField();
        Total_Points = new javax.swing.JTextField();
        Submit_Button = new javax.swing.JButton();
        Assignment_Type_Box = new javax.swing.JComboBox<>();
        Points_Label = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        Add_Assignment_Label.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        Add_Assignment_Label.setText("Add Assignment");

        Home_Button.setText("Home");
        Home_Button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Home_ButtonActionPerformed(evt);
            }
        });

        Assignment_Type_Label.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        Assignment_Type_Label.setText("Type:");

        Assignment_Name_Label.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        Assignment_Name_Label.setText("Name:");

        Assignment_Name.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        Total_Points.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        Submit_Button.setText("Submit");
        Submit_Button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Submit_ButtonActionPerformed(evt);
            }
        });

        Assignment_Type_Box.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Test", "Homework" }));

        Points_Label.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        Points_Label.setText("Points:");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(Assignment_Type_Label, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Points_Label, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Assignment_Name_Label, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(0, 1, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(Home_Button, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(Submit_Button, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(Total_Points, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(63, 63, 63))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(Add_Assignment_Label, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(Assignment_Name, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 104, Short.MAX_VALUE)
                            .addComponent(Assignment_Type_Box, javax.swing.GroupLayout.Alignment.LEADING, 0, 104, Short.MAX_VALUE))
                        .addGap(0, 0, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(Add_Assignment_Label)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Assignment_Type_Label)
                    .addComponent(Assignment_Type_Box, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Assignment_Name, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Assignment_Name_Label))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Total_Points, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Points_Label))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(Submit_Button)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 110, Short.MAX_VALUE)
                .addComponent(Home_Button)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void Home_ButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Home_ButtonActionPerformed
        super.dispose();
        new UI_Home().setVisible(true);
    }//GEN-LAST:event_Home_ButtonActionPerformed

    private void Submit_ButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Submit_ButtonActionPerformed

        String Type = Assignment_Type_Box.getSelectedItem().toString();
        String Name = Assignment_Name.getText();
        Boolean Duplicate = false;

        if (Name.isEmpty() || Total_Points.getText().isEmpty()) {
            HelpfulFunctions.showMessage("Empty field detected. Please fill out all necessary fields.");
        } else if (!Total_Points.getText().matches("^[0-9]+$")) {
            HelpfulFunctions.showMessage("Only enter whole numbers in the points field.");
        } else {
            int Points = Integer.parseInt(Total_Points.getText());
            Assignment AssignmentSelected = null;

            if (Type.equals("Test")) {

                ArrayList<Assignment> CurrentTestList = GetLatestTestData();
                
                for (int i = 0; i < CurrentTestList.size(); i++) {
                    if (CurrentTestList.get(i).getAssignmentName().equalsIgnoreCase(Name)) {
                        HelpfulFunctions.showMessage("Duplicate assignment name detected. Please select another name for this assignment.");
                        Duplicate = true;
                    }
                }
                
                if (Duplicate == false) {
                    CurrentTestList.add(new Assignment(Type, Name, Points));

                    for (int i = 0; i < CurrentTestList.size(); i++) {
                        if (CurrentTestList.get(i).getAssignmentName().equals(Name)) {
                            AssignmentSelected = CurrentTestList.get(i);
                            break;
                        }
                    }

                    if (AssignmentSelected.AddAssignment()) {
                        HelpfulFunctions.showMessage("Successfully created new assignment!");
                        super.dispose();
                        new UI_Home().setVisible(true);

                    } else {
                        HelpfulFunctions.showMessage("An error has occured.");
                    }

                }
            } else if (Type.equals("Homework")) {

                ArrayList<Assignment> CurrentHomeworkList = GetLatestHomeworkData();
                
                for (int i = 0; i < CurrentHomeworkList.size(); i++) {
                    if (CurrentHomeworkList.get(i).getAssignmentName().equalsIgnoreCase(Name)) {
                        HelpfulFunctions.showMessage("Duplicate assignment name detected. Please select another name for this assignment.");
                        Duplicate = true;
                    }
                }
                
                if (Duplicate == false) {
                
                CurrentHomeworkList.add(new Assignment(Type, Name, Points));

                    for (int i = 0; i < CurrentHomeworkList.size(); i++) {
                        if (CurrentHomeworkList.get(i).getAssignmentName().equals(Name)) {
                            AssignmentSelected = CurrentHomeworkList.get(i);
                            break;
                        }
                    }

                    if (AssignmentSelected.AddAssignment()) {
                        HelpfulFunctions.showMessage("Successfully created new assignment!");
                        super.dispose();
                        new UI_Home().setVisible(true);

                    } else {
                        HelpfulFunctions.showMessage("An error has occured.");
                    }
                }
            }
        }
    }//GEN-LAST:event_Submit_ButtonActionPerformed

    ArrayList GetLatestHomeworkData() {
        
        File HomeworkDir = new File("C:\\FinalProject\\Homework.csv"); //Path for homework file
        ArrayList<Assignment> HomeworkList = new ArrayList<>();
        try {
            BufferedReader reader = new BufferedReader(new FileReader(HomeworkDir));
            String line = "";
            while ((line = reader.readLine()) != null) {
                String[] result = line.split(",");
                HomeworkList.add(new Assignment("Homework", result[0], Integer.parseInt(result[1])));
            }

            reader.close();
        } catch (IOException e) {
            
        }
        return HomeworkList;

    }
    
    ArrayList GetLatestTestData() {
        
        File TestDir = new File("C:\\FinalProject\\Tests.csv"); //Path for test file
        ArrayList<Assignment> TestList = new ArrayList<>();
        try {
            BufferedReader reader = new BufferedReader(new FileReader(TestDir));
            String line = "";
            while ((line = reader.readLine()) != null) {
                String[] result = line.split(",");
                TestList.add(new Assignment("Test", result[0], Integer.parseInt(result[1])));
            }

            reader.close();
        } catch (IOException e) {

        }
        return TestList;

    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel Add_Assignment_Label;
    private javax.swing.JTextField Assignment_Name;
    private javax.swing.JLabel Assignment_Name_Label;
    private javax.swing.JComboBox<String> Assignment_Type_Box;
    private javax.swing.JLabel Assignment_Type_Label;
    private javax.swing.JButton Home_Button;
    private javax.swing.JLabel Points_Label;
    private javax.swing.JButton Submit_Button;
    private javax.swing.JTextField Total_Points;
    // End of variables declaration//GEN-END:variables
}
