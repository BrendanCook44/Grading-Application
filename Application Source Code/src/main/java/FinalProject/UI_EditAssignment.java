package FinalProject;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import java.util.ArrayList;

/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
/**
 *
 * @author brend
 */
public class UI_EditAssignment extends javax.swing.JFrame {

    /**
     * Creates new form Grades
     */
    public UI_EditAssignment() {
        initComponents();
        UpdateSelectionBoxTestItems();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        Edit_Assignment_Label = new javax.swing.JLabel();
        Assignment_Type_Label = new javax.swing.JLabel();
        Assignment_Type_Box = new javax.swing.JComboBox<>();
        Assignment_Name_Label = new javax.swing.JLabel();
        Assignment_Name_Box = new javax.swing.JComboBox<>();
        Home_Button = new javax.swing.JButton();
        Delete_Button = new javax.swing.JButton();
        Edit_Button = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        Edit_Assignment_Label.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        Edit_Assignment_Label.setText("Edit Assignment");

        Assignment_Type_Label.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        Assignment_Type_Label.setText("Type:");

        Assignment_Type_Box.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Test", "Homework" }));
        Assignment_Type_Box.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Assignment_Type_BoxActionPerformed(evt);
            }
        });

        Assignment_Name_Label.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        Assignment_Name_Label.setText("Name:");

        Home_Button.setText("Home");
        Home_Button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Home_ButtonActionPerformed(evt);
            }
        });

        Delete_Button.setText("Delete");
        Delete_Button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Delete_ButtonActionPerformed(evt);
            }
        });

        Edit_Button.setText("Edit");
        Edit_Button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Edit_ButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(Assignment_Type_Label, javax.swing.GroupLayout.DEFAULT_SIZE, 60, Short.MAX_VALUE)
                    .addComponent(Assignment_Name_Label, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(Home_Button, javax.swing.GroupLayout.DEFAULT_SIZE, 104, Short.MAX_VALUE)
                    .addComponent(Edit_Assignment_Label, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(Assignment_Name_Box, 0, 104, Short.MAX_VALUE)
                    .addComponent(Assignment_Type_Box, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(64, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(Edit_Button, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(Delete_Button, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(42, 42, 42))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(Edit_Assignment_Label)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Assignment_Type_Label)
                    .addComponent(Assignment_Type_Box, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Assignment_Name_Box, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Assignment_Name_Label))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Edit_Button)
                    .addComponent(Delete_Button))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 138, Short.MAX_VALUE)
                .addComponent(Home_Button)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void Assignment_Type_BoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Assignment_Type_BoxActionPerformed
        String selectedType = (String) Assignment_Type_Box.getSelectedItem();

        if (selectedType == "Test") {
            UpdateSelectionBoxTestItems();
        } else {
            UpdateSelectionBoxHomeworkItems();
        }

    }//GEN-LAST:event_Assignment_Type_BoxActionPerformed

    private void Home_ButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Home_ButtonActionPerformed
        super.dispose();
        new UI_Home().setVisible(true);
    }//GEN-LAST:event_Home_ButtonActionPerformed

    private void Delete_ButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Delete_ButtonActionPerformed
        
        String selectedType = (String) Assignment_Type_Box.getSelectedItem();
        String selectedAssignment = (String) Assignment_Name_Box.getSelectedItem();
        Assignment selectedAssignmentObject = null;

        if (selectedAssignment == null) {
            HelpfulFunctions.showMessage("Please select an assignment to delete.");
        } else {

            if (selectedType == "Test") {
                ArrayList<Assignment> testList = GetLatestTestData();

                for (int i = 0; i < testList.size(); i++) {
                    if (testList.get(i).getAssignmentName().equals(selectedAssignment)) {
                        selectedAssignmentObject = testList.get(i);

                        //Recreate test file without adding the removed student
                        selectedAssignmentObject.CreateTestFile();
                        testList.remove(i);
                    }
                }

                //Add other test assignments in list to newly created file
                for (int i = 0; i < testList.size(); i++) {
                    selectedAssignmentObject = testList.get(i);
                    selectedAssignmentObject.AddAssignment();
                }

                HelpfulFunctions.showMessage(selectedAssignment + " has been deleted.");
                super.dispose();
                new UI_Home().setVisible(true);

            } else {

                ArrayList<Assignment> homeworkList = GetLatestHomeworkData();

                for (int i = 0; i < homeworkList.size(); i++) {
                    if (homeworkList.get(i).getAssignmentName().equals(selectedAssignment)) {
                        selectedAssignmentObject = homeworkList.get(i);

                        //Recreate homework file without adding the removed homework assignment
                        selectedAssignmentObject.CreateHomeworkFile();
                        homeworkList.remove(i);
                    }
                }

                //Add other homework assignments in list to newly created file
                for (int i = 0; i < homeworkList.size(); i++) {
                    selectedAssignmentObject = homeworkList.get(i);
                    selectedAssignmentObject.AddAssignment();
                }

                HelpfulFunctions.showMessage(selectedAssignment + " has been deleted.");
                super.dispose();
                new UI_Home().setVisible(true);
            }
        }
    }//GEN-LAST:event_Delete_ButtonActionPerformed

    private void Edit_ButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Edit_ButtonActionPerformed

        String selectedType = (String) Assignment_Type_Box.getSelectedItem();
        String selectedAssignment = (String) Assignment_Name_Box.getSelectedItem();
        Assignment selectedAssignmentObject = null;

        if (selectedAssignment == null) {
            HelpfulFunctions.showMessage("Please select an assignment to edit.");
        } else {

            if (selectedType == "Test") {

                File testDir = new File("C:\\FinalProject\\Tests.csv");
                ArrayList<Assignment> testList = new ArrayList<>();
                try {
                    BufferedReader reader = new BufferedReader(new FileReader(testDir));
                    String line = "";
                    boolean found = false;
                    while (found == false) {
                        line = reader.readLine();
                        String[] result = line.split(",");
                        if (result[0].equals(selectedAssignment)) {
                            testList.add(new Assignment("Test", result[0], Integer.parseInt(result[1])));
                            found = true;
                        }
                    }

                    reader.close();
                } catch (IOException e) {

                }

                selectedAssignmentObject = testList.get(0);

                //Write Selected Assignment To EditedAssignment.CSV To Be Referenced By Next Screen
                if (selectedAssignmentObject.AddEditedAssignment()) {
                    super.dispose();
                    new UI_EditAssignmentDetails().setVisible(true);
                } else {
                    HelpfulFunctions.showMessage("An error has occured.");
                }
            } else {

                File homeworkDir = new File("C:\\FinalProject\\Homework.csv");
                ArrayList<Assignment> homeworkList = new ArrayList<>();
                try {
                    BufferedReader reader = new BufferedReader(new FileReader(homeworkDir));
                    String line = "";
                    boolean found = false;
                    while (found == false) {
                        line = reader.readLine();
                        String[] result = line.split(",");
                        if (result[0].equals(selectedAssignment)) {
                            homeworkList.add(new Assignment("Homework", result[0], Integer.parseInt(result[1])));
                            found = true;
                        }
                    }

                    reader.close();
                } catch (IOException e) {

                }

                selectedAssignmentObject = homeworkList.get(0);

                //Write Selected Assignment To EditedAssignment.CSV To Be Referenced By Next Screen
                if (selectedAssignmentObject.AddEditedAssignment()) {
                    super.dispose();
                    new UI_EditAssignmentDetails().setVisible(true);
                } else {
                    HelpfulFunctions.showMessage("An error has occured.");
                }
            }
        }
    }//GEN-LAST:event_Edit_ButtonActionPerformed

    void UpdateSelectionBoxTestItems() {
        
        File TestDir = new File("C:\\FinalProject\\Tests.csv"); //Path for test file
        Assignment_Name_Box.removeAllItems();
        try {
            BufferedReader reader = new BufferedReader(new FileReader(TestDir));
            String line = "";
            while ((line = reader.readLine()) != null) {
                String[] result = line.split(",");
                Assignment_Name_Box.addItem(result[0]);
            }

            reader.close();
        } catch (IOException e) {
            
        }
    }
    
    ArrayList GetLatestTestData() {
        File TestDir = new File("C:\\FinalProject\\Tests.csv"); //Path for test file
        ArrayList<Assignment> TestList = new ArrayList<>();
        try {
            BufferedReader reader = new BufferedReader(new FileReader(TestDir));
            String line = "";
            while ((line = reader.readLine()) != null) {
                String[] result = line.split(",");
                //Only name [0] and points [1] are added to the CSV file - No need to write type to the test file
                TestList.add(new Assignment("Test", result[0], Integer.parseInt(result[1])));
            }

            reader.close();
        } catch (IOException e) {

        }
        return TestList;

    }
    
    void UpdateSelectionBoxHomeworkItems() {

        File HomeworkDir = new File("C:\\FinalProject\\Homework.csv"); //Path for homework file
        Assignment_Name_Box.removeAllItems();
        try {
            BufferedReader reader = new BufferedReader(new FileReader(HomeworkDir));
            String line = "";
            while ((line = reader.readLine()) != null) {
                String[] result = line.split(",");
                Assignment_Name_Box.addItem(result[0]);
            }

            reader.close();
        } catch (IOException e) {

        }
    }
    
    ArrayList GetLatestHomeworkData() {

        File HomeworkDir = new File("C:\\FinalProject\\Homework.csv"); //Path for homework file
        ArrayList<Assignment> HomeworkList = new ArrayList<>();
        try {
            BufferedReader reader = new BufferedReader(new FileReader(HomeworkDir));
            String line = "";
            while ((line = reader.readLine()) != null) {
                String[] result = line.split(",");
                //Only name [0] and points [1] are added to the CSV file - No need to write type to the homework file
                HomeworkList.add(new Assignment("Homework", result[0], Integer.parseInt(result[1])));
            }

            reader.close();
        } catch (IOException e) {
            
        }
        return HomeworkList;

    }
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> Assignment_Name_Box;
    private javax.swing.JLabel Assignment_Name_Label;
    private javax.swing.JComboBox<String> Assignment_Type_Box;
    private javax.swing.JLabel Assignment_Type_Label;
    private javax.swing.JButton Delete_Button;
    private javax.swing.JLabel Edit_Assignment_Label;
    private javax.swing.JButton Edit_Button;
    private javax.swing.JButton Home_Button;
    // End of variables declaration//GEN-END:variables
}

